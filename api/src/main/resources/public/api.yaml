openapi: 3.0.1
info:
  title: Car Hire API
  version: 0.1.0
  contact:
    name: Viorel Smeu
  description: Car Hire API
servers:
  - url: http://localhost:{port}
    description: local environment
    variables:
      port:
        default: '8080'
tags:
  - name: sample
    description: Sample resource endpoint
paths:
  /sample:
    get:
      tags:
        - sample
      summary: get sample
      description: returns a list of all the sample objects, without any filtering
      operationId: getSamples
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SampleDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /fleet:
    post:
      tags:
        - fleet
      summary: post fleet
      description: creates a new car for the fleet
      operationId: createCar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarDTO'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - fleet
      summary: get fleet
      description: gets the entire fleet, with filter options if specified
      operationId: getFleet
      parameters:
        - in: query
          name: status
          schema:
            type: string
          description: The status of the returned cars belonging to the fleet
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /fleet/{carId}:
    get:
      tags:
        - fleet
      summary: get specific car from fleet
      description: retrieves a specific car from fleet based on its id
      operationId: getFleetCar
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Id not found
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - fleet
      summary: deletes specific car from fleet
      description: deletes a specific car from fleet based on its id
      operationId: deleteFleetCar
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: id not found
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - fleet
      summary: updates a car properties
      description: updates a car properties
      operationId: patchFleetCar
      parameters:
        - in: path
          name: carId
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRequestDTO"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: id not found
        '500':
          $ref: '#/components/responses/ServerError'
  /rental:
    post:
      tags:
        - rental
      summary: post rental
      description: creates a rental
      operationId: createRental
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentalDTO'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - rental
      summary: get rental
      description: gets all the rentals, with filter options if specified
      operationId: getRentals
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
            format: int32
          description: The user id used to filter
        - in: query
          name: carId
          schema:
            type: integer
            format: int32
            description: The car id used to filter
        - in: query
          name: status
          schema:
            type: string
          description: The status of the rental used to filter
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /rental/{rentalId}:
    get:
      tags:
        - rental
      summary: get specific rental
      description: retrieves a specific rental based on its id
      operationId: getRental
      parameters:
        - in: path
          name: rentalId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Id not found
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - rental
      summary: deletes specific rental
      description: deletes a specific rental based on its id
      operationId: deleteRental
      parameters:
        - in: path
          name: rentalId
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: id not found
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - rental
      summary: updates a rental properties
      description: updates a rental properties
      operationId: patchRental
      parameters:
        - in: path
          name: rentalId
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RentalDTO"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: id not found
        '500':
          $ref: '#/components/responses/ServerError'
  /user:
    post:
      tags:
        - user
      summary: post user
      description: creates a user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - user
      summary: gets all users
      description: gets all the users
      operationId: getUsers
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /user/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: integer
        required: true
    get:
      tags:
        - user
      summary: get specific user
      description: retrieves a specific user based on its id
      operationId: getUser
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Id not found
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - user
      summary: deletes specific user
      description: deletes a specific user based on its id
      operationId: deleteUser

      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: id not found
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - user
      summary: updates a user properties
      description: updates a user properties
      operationId: patchUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: id not found
        '500':
          $ref: '#/components/responses/ServerError'


components:
  responses:
    Unauthorized:
      description: unauthorized
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ValidationDTO'
    ServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
  schemas:
    ValidationDTO:
      type: object
      properties:
        code:
          type: string
        field:
          type: string
        description:
          type: string
    ErrorDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    SampleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id of the sample
        name:
          type: string
          example: Sample name
          description: full name of the sample
    CarDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id of the car
        make:
          $ref: '#/components/schemas/MakeDTO'
        model:
          type: string
          description: model of the car
        year:
          type: string
          format: date
          description: the year when the car was fabricated
        mileage:
          type: integer
          format: int32
          description: the current mileage of the car
        fuel:
          type: string
          description: the fuel type of the car
        carClass:
          type: string
          enum: [ "Sports", "Supercar", "Premium Compact", "Executive", "Off-road vehicle",
                  "Sports utility vehicle", "Muscle", "City car" ]
          description: the class of the car
        status:
          type: string
          enum: [ "ACTIVE", "DELETED" ]
          description: the status of the car
    PatchRequestDTO:
      type: array
      items:
        $ref: "#/components/schemas/PatchDocumentDTO"
    PatchDocumentDTO:
      description: A JSONPatch document as defined by RFC 6902
      required:
        - "operation"
        - "path"
      properties:
        operation:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.
    RentalDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id of the rental
        userId:
          type: integer
          format: int32
          description: id of the user
        carId:
          type: integer
          format: int32
          description: id of the car
        startDateTime:
          type: string
          format: date-time
          description: the start date and time of the rental
        endDateTime:
          type: string
          format: date-time
          description: the end date and time of the rental
        status:
          type: string
          enum: [ "ACTIVE", "CANCELLED" ]
          description: the status of the rental
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id of the user
        email:
          type: string
          format: email
          description: email of the user
        password:
          type: string
          format: password
          description: password of the user
        userName:
          type: string
          description: username of the user
        firstName:
          type: string
          description: first name of the user
        lastName:
          type: string
          description: last name of the user
        countryOfResidence:
          $ref: "#/components/schemas/CountryDTO"
        driverLicenseNumber:
          type: string
          description: driver license number of the user
        status:
          type: string
          enum: [ "ACTIVE", "DELETED" ]
          description: the status of the user
    CountryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id of the country
        name:
          type: string
          description: name of the country
        isoCode:
          type: string
          description: isoCode of the country
    MakeDTO:
      type: object
      description: the make/brand for the most popular cars
      properties:
        id:
          type: integer
          format: int32
          description: id of the make
        name:
          type: string
          description: name of the make/brand
        description:
          type: string
          description: description of the make/brand



